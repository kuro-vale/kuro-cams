<!-- Modal backdrop. This what you want to place close to the closing body tag -->
<div
    x-show="isModalOpen"
    x-transition:enter="transition ease-out duration-150"
    x-transition:enter-start="opacity-0"
    x-transition:enter-end="opacity-100"
    x-transition:leave="transition ease-in duration-150"
    x-transition:leave-start="opacity-100"
    x-transition:leave-end="opacity-0"
    class="fixed inset-0 z-30 flex items-end bg-black bg-opacity-50 sm:items-center sm:justify-center"
>
    <!-- Modal -->
    <div
    x-show="isModalOpen"
    x-transition:enter="transition ease-out duration-150"
    x-transition:enter-start="opacity-0 transform translate-y-1/2"
    x-transition:enter-end="opacity-100"
    x-transition:leave="transition ease-in duration-150"
    x-transition:leave-start="opacity-100"
    x-transition:leave-end="opacity-0  transform translate-y-1/2"
    @click.away="closeModal"
    @keydown.escape="closeModal"
    class="w-full px-6 py-4 overflow-hidden bg-white rounded-t-lg dark:bg-gray-800 sm:rounded-lg sm:m-4 sm:max-w-xl"
    role="dialog"
    id="modal"
    >
    <header class="flex justify-end">
        <button
        class="inline-flex items-center justify-center w-6 h-6 text-gray-400 transition-colors duration-150 rounded dark:hover:text-gray-200 hover: hover:text-gray-700"
        aria-label="close"
        @click="closeModal"
        >
        <svg
            class="w-4 h-4"
            fill="currentColor"
            viewBox="0 0 20 20"
            role="img"
            aria-hidden="true"
        >
            <path
            d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z"
            clip-rule="evenodd"
            fill-rule="evenodd"
            ></path>
        </svg>
        </button>
    </header>
    <!-- Modal body -->
    <div class="mt-4 mb-6">
        <video id="local-video" class="fixed w-40" playsinline autoplay muted style="transform: rotateY(180deg);"></video>
        <video id="remote-video" playsinline autoplay></video>
    </div>
    <footer
        class="flex items-center justify-center px-6 py-3 -mx-6 -mb-4 bg-gray-50 dark:bg-gray-800"
    >
        <button
        class="flex items-center justify-between px-2 py-2 text-sm font-medium leading-5 text-white transition-colors duration-150 bg-green-600 border border-transparent rounded-full active:bg-green-600 hover:bg-green-700 focus:outline-none focus:shadow-outline-purple"
        >
        <svg
        id="call_button"
        class="w-5 h-5"
        aria-hidden="true"
        fill="currentColor"
        viewBox="0 0 24 24"
        >
        <path d="M16 22.621l-3.521-6.795c-.007.004-1.974.97-2.064 1.011-2.24 1.086-6.799-7.82-4.609-8.994l2.082-1.026-3.492-6.817-2.106 1.039c-1.622.845-2.298 2.627-2.289 4.843.027 6.902 6.711 18.013 12.212 18.117.575.011 1.137-.098 1.677-.345.121-.055 2.102-1.029 2.11-1.033zm4-5.621h-1v-13h1v13zm-2-2h-1v-9h1v9zm4-1h-1v-7h1v7zm-6-1h-1v-5h1v5zm-2-1h-1v-3h1v3zm10 0h-1v-3h1v3zm-12-1h-1v-1h1v1z"
        />
        </svg>
        </button>
    </footer>
    </div>
</div>
<!-- End of modal backdrop -->

<script type="module">
let callButton = document.getElementById("call_button")
callButton.addEventListener("click", initCall);

let localVideo = document.getElementById("local-video")
let remoteVideo = document.getElementById("remote-video")

let renderVideo = async (stream) => {
  remoteVideo.srcObject = stream;
  localVideo.srcObject = await navigator.mediaDevices.getUserMedia({ audio: false, video: true})
};

let peer = new Peer("kuro-cams-user-number-<%= @current_user.id %>", {
    host: '<%= System.get_env("PEERJS_SERVER") || "0.peerjs.com" %>',
    path: '/'
});
peer.on("connection", (conn) => {
	conn.on("data", (data) => {
		console.log(data);
	});
});
peer.on('call', (call) => {
  navigator.mediaDevices.getUserMedia({video: true, audio: true})
    .then((stream) => {
      call.answer(stream); // Answer the call with an A/V stream.
      call.on('stream', renderVideo);
    })
    .catch((err) => {
      console.error('Failed to get local stream', err);
    });
});

function initCall() {
    let peerId = "kuro-cams-user-number-<%= @room.to_user %>"
    let conn = peer.connect(peerId);
    conn.on("open", () => {
        conn.send("hi!");
    });

    navigator.mediaDevices.getUserMedia({video: true, audio: true})
    .then((stream) => {
      let call = peer.call(peerId, stream);
      call.on('stream', renderVideo);
    })
    .catch((err) => {
      logMessage('Failed to get local stream', err);
    });
}
</script>
